window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "nbsbot", "modulename": "nbsbot", "type": "module", "doc": "<p></p>\n"}, {"fullname": "nbsbot.covidcasereview", "modulename": "nbsbot.covidcasereview", "type": "module", "doc": "<p></p>\n"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview", "type": "class", "doc": "<p>A class inherits all basic NBS functionality from NBSdriver and adds\nmethods for reviewing COVID case investigations for data accuracy and completeness.</p>\n", "bases": "nbsdriver.NBSdriver"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.__init__", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.__init__", "type": "function", "doc": "<p>Creates a new instance of the chrome driver.\nStarts the service and then creates new instance of chrome driver.</p>\n\n<p>:Args:</p>\n\n<ul>\n<li>executable_path - Deprecated: path to the executable. If the default is used it assumes the executable is in the $PATH</li>\n<li>port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.</li>\n<li>options - this takes an instance of ChromeOptions</li>\n<li>service - Service object for handling the browser driver if you need to pass extra details</li>\n<li>service_args - Deprecated: List of args to pass to the driver service</li>\n<li>desired_capabilities - Deprecated: Dictionary object with non-browser specific\ncapabilities only, such as \"proxy\" or \"loggingPref\".</li>\n<li>service_log_path - Deprecated: Where to log information from the driver.</li>\n<li>keep_alive - Deprecated: Whether to configure ChromeRemoteConnection to use HTTP keep-alive.</li>\n</ul>\n", "signature": "(self, production=False)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.GetObInvNames", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.GetObInvNames", "type": "function", "doc": "<p>Read list of congregate setting outbreak investigators from config.cfg.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.Reset", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.Reset", "type": "function", "doc": "<p>Clear values of attributes assigned during case investigation review.\nTo be used on initialization and between case reviews.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckFirstName", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckFirstName", "type": "function", "doc": "<p>Must provide first name.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckLastName", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckLastName", "type": "function", "doc": "<p>Must provide last name.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckDOB", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckDOB", "type": "function", "doc": "<p>Must provide DOB.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckCurrentSex", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckCurrentSex", "type": "function", "doc": "<p>Ensure patient current sex is not blank.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckStAddr", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckStAddr", "type": "function", "doc": "<p>Must provide street address.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckCity", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckCity", "type": "function", "doc": "<p>Must provide city.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckState", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckState", "type": "function", "doc": "<p>Must provide state and if it is not Maine case should be not a case.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckZip", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckZip", "type": "function", "doc": "<p>Must provide zip code.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckCounty", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckCounty", "type": "function", "doc": "<p>Must provide county.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckCountry", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckCountry", "type": "function", "doc": "<p>Must provide country.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckEthnicity", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckEthnicity", "type": "function", "doc": "<p>Must provide ethnicity.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckNonWhiteEthnicity", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckNonWhiteEthnicity", "type": "function", "doc": "<p>Ensure that all ehthnicaly non-white cases are assigned for investigation.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckRace", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckRace", "type": "function", "doc": "<p>Must provide race and selection must make sense.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckNonWhiteRace", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckNonWhiteRace", "type": "function", "doc": "<p>Ensure that all racially non-white cases are assigned for investigation.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckJurisdiction", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckJurisdiction", "type": "function", "doc": "<p>Jurisdiction and county must match.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckProgramArea", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckProgramArea", "type": "function", "doc": "<p>Program area must be Airborne.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckInvestigationStartDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckInvestigationStartDate", "type": "function", "doc": "<p>Verify investigation start date is on or after report date.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckInvestigationStatus", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckInvestigationStatus", "type": "function", "doc": "<p>Only accept closed investigations for review.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckSharedIndicator", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckSharedIndicator", "type": "function", "doc": "<p>Ensure shared indicator is yes.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckStateCaseID", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckStateCaseID", "type": "function", "doc": "<p>State Case ID must be provided.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckInvestigator", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckInvestigator", "type": "function", "doc": "<p>Check if an investigator was assigned to the case.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckInvestigatorAssignDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckInvestigatorAssignDate", "type": "function", "doc": "<p>If an investigator was assinged then there should be an investigator\nassigned date.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckReportDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckReportDate", "type": "function", "doc": "<p>Check if the current value of Report Date matches the earliest\nReport Date from the associated labs.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckCountyStateReportDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckCountyStateReportDate", "type": "function", "doc": "<p>Check if the current value of county report date is consistent with\nthe current value of earliest report to state date and the report date.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckReportingSourceType", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckReportingSourceType", "type": "function", "doc": "<p>Ensure that reporting source type is not empty.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckReportingOrganization", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckReportingOrganization", "type": "function", "doc": "<p>Ensure that reporting organization is not empty.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckPreformingLaboratory", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckPreformingLaboratory", "type": "function", "doc": "<p>Ensure that preforming laboratory is not empty.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckCollectionDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckCollectionDate", "type": "function", "doc": "<p>Check if collection date is present and matches earliest date from\nassociated labs.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckCurrentStatus", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckCurrentStatus", "type": "function", "doc": "<p>Check if current status in the investigation is consistent with the\nassociated labs.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckProbableReason", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckProbableReason", "type": "function", "doc": "<p>Check if probable reason is consistent with current status and case\nstatus.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckFirstAttemptDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckFirstAttemptDate", "type": "function", "doc": "<p>Verify that first attempt to contact date is provided and greater\nthan or equal to investigation start date.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckHospitalizationIndicator", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckHospitalizationIndicator", "type": "function", "doc": "<p>Read hospitalization status. If an investigation was conducted it must be Yes or No</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckHospitalName", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckHospitalName", "type": "function", "doc": "<p>\" If the case is hospitalized then a hospital name must be provided.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckAdmissionDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckAdmissionDate", "type": "function", "doc": "<p>Check for hospital admission date.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckDischargeDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckDischargeDate", "type": "function", "doc": "<p>Check for hospital discharge date.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckIcuIndicator", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckIcuIndicator", "type": "function", "doc": "<p>If case is hospitalized then we should know if they were ever in the ICU.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckIcuAdmissionDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckIcuAdmissionDate", "type": "function", "doc": "<p>Check for ICU admission date.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckIcuDischargeDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckIcuDischargeDate", "type": "function", "doc": "<p>Check for ICU discharge date.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckDieFromIllness", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckDieFromIllness", "type": "function", "doc": "<p>Died from illness should be yes or no.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckDeathDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckDeathDate", "type": "function", "doc": "<p>Death date must be present.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckCongregateSetting", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckCongregateSetting", "type": "function", "doc": "<p>Check if a patient lives in congregate setting.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckCongregateFacilityName", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckCongregateFacilityName", "type": "function", "doc": "<p>Need a congregate faciltiy name if patient lives in congregate setting.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckFirstResponder", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckFirstResponder", "type": "function", "doc": "<p>Check if a patient is a first responder.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckFirstResponderOrg", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckFirstResponderOrg", "type": "function", "doc": "<p>Check first responder organization.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckHealthcareWorker", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckHealthcareWorker", "type": "function", "doc": "<p>Check if patient is a healthcare worker.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckHealtcareWorkerFacility", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckHealtcareWorkerFacility", "type": "function", "doc": "<p>If the patient is a healthcare worker then a facility name must be provided.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckHealthcareWorkerJob", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckHealthcareWorkerJob", "type": "function", "doc": "<p>If the patient is a healthcare worker then an occupation name must be provided.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckHealthcareWorkerJobOther", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckHealthcareWorkerJobOther", "type": "function", "doc": "<p>If the patient is a healthcare worker and occupation is other then name must be provided.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckHealthcareWorkerSetting", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckHealthcareWorkerSetting", "type": "function", "doc": "<p>If the patient is a healthcare worker then healthcare setting name must be provided.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckHealthcareWorkerSettingOther", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckHealthcareWorkerSettingOther", "type": "function", "doc": "<p>If the patient is a healthcare worker and setting is other then name must be provided.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.GetNumListedCloseContacts", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.GetNumListedCloseContacts", "type": "function", "doc": "<p>Determine number of rows in close contact table to find the number of\nclose contacts listed.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckNumCloseContacts", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckNumCloseContacts", "type": "function", "doc": "<p>Ensure that the number of close contacts listed is consistent with\nthe number of entries in the Sara Alert repeating block.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckExposureSection", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckExposureSection", "type": "function", "doc": "<p>Make sure that exposure section contains at least one 'Yes' and if\nmore than one that \"Uknown exposure\" is not included.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckDomesticTravel", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckDomesticTravel", "type": "function", "doc": "<p>If domestic travel is indicated states involved must be specified.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckShipTravel", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckShipTravel", "type": "function", "doc": "<p>If travel by boat is indicated vessel name must be specified.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckSchoolExposure", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckSchoolExposure", "type": "function", "doc": "<p>If school/daycare exposure is indicated ensure that facility name is\nprovided.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckOutbreakExposure", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckOutbreakExposure", "type": "function", "doc": "<p>If outbreak exposure is indicated then outbreak name must be provided.\nIf the case is assigned to outbreak investigator outbreak exposure section must be complete.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckTransmissionMode", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckTransmissionMode", "type": "function", "doc": "<p>Transmission mode should blank or airborne</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckConfirmationMethod", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckConfirmationMethod", "type": "function", "doc": "<p>Confirmation Method must be blank or consistent with correct case status.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckDetectionMethod", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckDetectionMethod", "type": "function", "doc": "<p>Ensure Detection Method is not blank.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckConfirmationDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckConfirmationDate", "type": "function", "doc": "<p>Confirmation date must be on or after report date.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckCaseStatus", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckCaseStatus", "type": "function", "doc": "<p>Case status must be consistent with associated labs.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckMmwrWeek", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckMmwrWeek", "type": "function", "doc": "<p>MMWR week must be provided.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckMmwrYear", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckMmwrYear", "type": "function", "doc": "<p>MMWR year must be provided.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckLostToFollowUp", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckLostToFollowUp", "type": "function", "doc": "<p>Check if case is lost to follow up.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckClosedDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckClosedDate", "type": "function", "doc": "<p>Check if a closed date is provided and makes sense</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckSymptoms", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckSymptoms", "type": "function", "doc": "<p>\" Check symptom status of case.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckSymptomDatesAndStatus", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckSymptomDatesAndStatus", "type": "function", "doc": "<p>Ensure date of symptom onset, resolution, and current symptom status\nare consistent.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckIsolation", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckIsolation", "type": "function", "doc": "<p>Ensure isolation release indicator, release date, and died from illness\nindicator are all consistent.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckPreExistingConditions", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckPreExistingConditions", "type": "function", "doc": "<p>Ensure pre-exisiting condtions indicator is consistent with medical history.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckImmPactQuery", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckImmPactQuery", "type": "function", "doc": "<p>Ensure ImmPact was queried when age eligible.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckRecievedVax", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckRecievedVax", "type": "function", "doc": "<p>Ever recieved vaccine should only be no when case not LTFU.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckFullyVaccinated", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckFullyVaccinated", "type": "function", "doc": "<p>Validate fully vaccinated question</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckTestingPreformed", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckTestingPreformed", "type": "function", "doc": "<p>Ensure testing preformed is Yes or No.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckLabTable", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckLabTable", "type": "function", "doc": "<p>Ensure that labs listed in investigation support case status.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.ReadAssociatedLabs", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.ReadAssociatedLabs", "type": "function", "doc": "<p>Read table of associated labs.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.AssignLabTypes", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.AssignLabTypes", "type": "function", "doc": "<p>Determine lab type (PCR, Ag, or Ab) for each associated lab.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.DetermineCaseStatus", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.DetermineCaseStatus", "type": "function", "doc": "<p>Review lab types to determine case status.\nPCR =&gt; confirmed\nAntigen =&gt; probable\nAntibody =&gt; suspect</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.GetReportDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.GetReportDate", "type": "function", "doc": "<p>Find earliest report date by reviewing associated labs</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.GetCollectionDate", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.GetCollectionDate", "type": "function", "doc": "<p>Find earliest collection date by reviewing associated labs</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.ReadAoes", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.ReadAoes", "type": "function", "doc": "<p>Read AOEs from associated labs.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckHospAOE", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckHospAOE", "type": "function", "doc": "<p>Ensure that if AOEs show a patient as hosptialized the investigation matches.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckIcuAOE", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckIcuAOE", "type": "function", "doc": "<p>Ensure that if AOEs show a patient as in the ICU the investigation matches.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckHcwAOE", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckHcwAOE", "type": "function", "doc": "<p>Ensure that if AOEs show a patient is a healthcare worker the investigation matches.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckSympAOE", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckSympAOE", "type": "function", "doc": "<p>Ensure that if AOEs show a patient is symptomatic the investigation matches.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckCongAOE", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckCongAOE", "type": "function", "doc": "<p>Ensure that if AOEs show a patient lives in a congregate setting the\ninvestigation matches.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckFirstResponderAOE", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckFirstResponderAOE", "type": "function", "doc": "<p>Ensure that if AOEs show a patient is a first responder that the\ninvestigation matches.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidcasereview.COVIDcasereview.CheckPregnancyAOE", "modulename": "nbsbot.covidcasereview", "qualname": "COVIDcasereview.CheckPregnancyAOE", "type": "function", "doc": "<p>Ensure that if AOEs show a patient is pregnany that the\ninvestigation matches.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview", "modulename": "nbsbot.covidlabreview", "type": "module", "doc": "<p></p>\n"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview", "type": "class", "doc": "<p>A class inherits all basic NBS functionality from NBSdriver and adds\nmethods for reviewing unassigned COVID labs.</p>\n", "bases": "nbsdriver.NBSdriver"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.__init__", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.__init__", "type": "function", "doc": "<p>Creates a new instance of the chrome driver.\nStarts the service and then creates new instance of chrome driver.</p>\n\n<p>:Args:</p>\n\n<ul>\n<li>executable_path - Deprecated: path to the executable. If the default is used it assumes the executable is in the $PATH</li>\n<li>port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.</li>\n<li>options - this takes an instance of ChromeOptions</li>\n<li>service - Service object for handling the browser driver if you need to pass extra details</li>\n<li>service_args - Deprecated: List of args to pass to the driver service</li>\n<li>desired_capabilities - Deprecated: Dictionary object with non-browser specific\ncapabilities only, such as \"proxy\" or \"loggingPref\".</li>\n<li>service_log_path - Deprecated: Where to log information from the driver.</li>\n<li>keep_alive - Deprecated: Whether to configure ChromeRemoteConnection to use HTTP keep-alive.</li>\n</ul>\n", "signature": "(self, production=False)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.reset", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.reset", "type": "function", "doc": "<p>Clear values of attributes assigned during case investigation review.\nTo be used on initialization and between case reviews.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.get_db_connection_info", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.get_db_connection_info", "type": "function", "doc": "<p>Read information required to connect to the NBS database.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.get_patient_table", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.get_patient_table", "type": "function", "doc": "<p>Execute a view in the nbs_odse database to return all patients in\nNBS including firt name, last name, birth date, and parent id. This data\nis then stored in a DataFrame for future use.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.get_unassigned_covid_labs", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.get_unassigned_covid_labs", "type": "function", "doc": "<p>Connect to the analyis NBS database and execute a query to return a\nlist of all unassociated labs along with the data required to create\ninvestigations for them.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.select_counties", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.select_counties", "type": "function", "doc": "<p>A method to prompt the user to specify which counties unassociated labs should be review from.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.select_min_delay", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.select_min_delay", "type": "function", "doc": "<p>A method to prompt the user to specify the minimum delay in reviewing unassociated labs.\nIf 3 is select then NBSbot will only review unassocated labs that were reported 3 or more days ago.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.get_age_range", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.get_age_range", "type": "function", "doc": "<p>Prompt user to provide the minimum and maximum patient age of unassociated labs to be opened and closed.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.select_aoe_filters", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.select_aoe_filters", "type": "function", "doc": "<p>Prompt user to decide if they would like to filter out unassociated las on the basis of affirmative AOE respones.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.check_for_possible_merges", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.check_for_possible_merges", "type": "function", "doc": "<p>Given a patient's first name, last name, and dob search for possible\nmatches amoung all patients in NBS.</p>\n", "signature": "(self, fname, lname, dob)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.check_patient_hospitalization_status", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.check_patient_hospitalization_status", "type": "function", "doc": "<p>Check Patient Status at Specimen Collection from inside a lab report.\nOccasionally there are cases that indicate a status of 'inpatient' without an AOE inidicating a hospitalization.\nIn this case the bot will not open and closed a case, but instead leave the lab for human review.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.check_for_existing_investigation", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.check_for_existing_investigation", "type": "function", "doc": "<p>Review the Investigations table in the Events tab of a patient profile\nto determine if the case already has an existing investigation.</p>\n", "signature": "(self, collection_date)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.create_investigation", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.create_investigation", "type": "function", "doc": "<p>Create a new investigation from within a lab report when one does not already exist .</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.associate_lab_with_investigation", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.associate_lab_with_investigation", "type": "function", "doc": "<p>Associate a lab with an existing investigation when one for the case has already been started.</p>\n", "signature": "(self, lab_id)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.query_immpact", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.query_immpact", "type": "function", "doc": "<p>Click the query registry button, submit the query to immpact, and read the results into a DataFrame.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.id_covid_vaccinations", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.id_covid_vaccinations", "type": "function", "doc": "<p>Identify COVID vaccines by their specific brand.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.import_covid_vaccinations", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.import_covid_vaccinations", "type": "function", "doc": "<p>Select all COVID vaccinations in the list returned by Immpact and import them.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.determine_vaccination_status", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.determine_vaccination_status", "type": "function", "doc": "<p>Determine vaccination status at time of illness and other required vaccination data points.</p>\n", "signature": "(self, collection_date)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.read_street", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.read_street", "type": "function", "doc": "<p>Read the current street address.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.read_city", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.read_city", "type": "function", "doc": "<p>Read the current city/town.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.read_zip", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.read_zip", "type": "function", "doc": "<p>Read the current zip code.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.write_zip", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.write_zip", "type": "function", "doc": "<p>Write zip code. Intended for use after looking up a missing zip code with zip_code_lookup().</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.read_county", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.read_county", "type": "function", "doc": "<p>Read the current county.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.write_county", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.write_county", "type": "function", "doc": "<p>Write county. Intended for use after looking up a missing missing count with county_lookup().</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.read_address", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.read_address", "type": "function", "doc": "<p>Read parts of the patient address except for state and country.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_state", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_state", "type": "function", "doc": "<p>Set state value in patient address.</p>\n", "signature": "(self, state)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_country", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_country", "type": "function", "doc": "<p>Set country value in patient address.</p>\n", "signature": "(self, country)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.check_ethnicity", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.check_ethnicity", "type": "function", "doc": "<p>Check if ethnicity is completed and if not set the values to unknown.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.clear_ambiguous_race_answers", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.clear_ambiguous_race_answers", "type": "function", "doc": "<p>Ensure all ambiguous race answers (refused to answer, not answered, and unknown) are not selected.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.check_race", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.check_race", "type": "function", "doc": "<p>Review current race value. If any combination of non-ambiguous options\nare selection make sure all other choice are not selected. Accept \"other\"\nonly when no unambigious answer is present. When race is not clearly\ndefined or other set value to unknown.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.read_demographic_address", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.read_demographic_address", "type": "function", "doc": "<p>Read address table from the demographics tab of a patient profile and\nselect the most recent address from within the last year that is consistent\nwith all parts of the address reported in the current lab report.</p>\n", "signature": "(self, state='')", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.write_demographic_address", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.write_demographic_address", "type": "function", "doc": "<p>After reading an address from the demographics tab, moving back into\nan investigation, and entering edit mode, write the data to the address\nfields.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.read_demographic_race", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.read_demographic_race", "type": "function", "doc": "<p>Read the race table in the demographics tab and select the most recent\nnonambigous value, if present.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.write_demographic_race", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.write_demographic_race", "type": "function", "doc": "<p>After reading a race from the demographics tab, moving back into an\ninvestigation, and entering edit mode, write the data to the race field.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.read_demographic_ethnicity", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.read_demographic_ethnicity", "type": "function", "doc": "<p>Read the ethnicity table in the demographics tab and select the most\nrecent non-unknown value, if present.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.write_demographic_ethnicity", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.write_demographic_ethnicity", "type": "function", "doc": "<p>After reading an ethnicity from the demographics tab, moving back into an\ninvestigation, and entering edit mode, write the data to the ethnicity field.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_investigation_start_date", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_investigation_start_date", "type": "function", "doc": "<p>Set investigation start date to today.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_investigation_status_closed", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_investigation_status_closed", "type": "function", "doc": "<p>Set investigation status to closed.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_state_case_id", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_state_case_id", "type": "function", "doc": "<p>Set the State Case ID to the NBS patient ID.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.read_investigation_id", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.read_investigation_id", "type": "function", "doc": "<p>From within an investigation read the investigation id.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_county_and_state_report_dates", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_county_and_state_report_dates", "type": "function", "doc": "<p>Set Earliest Date Reported to County and Earliest Date Reported to\nState based on Lab_Rpt_Received_By_PH_Dt. This method may be used when\ncreating new investigations or when associating additional labs with an\nexisting investigation. In the case where there is an existing report\ndate in the existing invesitigation it will only be replaced when the\nprovided report date is earlier.</p>\n", "signature": "(self, report_to_ph_date)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.update_report_date", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.update_report_date", "type": "function", "doc": "<p>When associating a lab with an existing investigation check to see if\nthe new lab was reported prior to the report date currently assigned to\nthe investigation. If so, replace it with the report date of the new lab.\nIf not, do nothing.</p>\n", "signature": "(self, report_to_ph_date)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_performing_lab", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_performing_lab", "type": "function", "doc": "<p>Set performing laboratory name based on lab report.</p>\n", "signature": "(self, performing_lab)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_earliest_positive_collection_date", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_earliest_positive_collection_date", "type": "function", "doc": "<p>Read the earliest positive speciment collection date field. If there\nis a date present and it is prior to the collection of the current lab do\nnothing. In the event that the field is blank or the collection of the\ncurrent lab is prior to the current value of the field, set the value to\nthe collection date of the current lab. This additional check allows this\nmethod to be used when creating investigations or associating labs with\nexisting investigations.</p>\n", "signature": "(self, lab_collection_date)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_case_status", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_case_status", "type": "function", "doc": "<p>Set all three fields related to case status based on the provided status.</p>\n", "signature": "(self, status)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.review_case_status", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.review_case_status", "type": "function", "doc": "<p>Review current case status and current lab type. Then set case status\naccordingly. This method can be used for creating investigations or\nassociating additional labs with existing investigations.</p>\n", "signature": "(self, lab_type)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.update_aoe", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.update_aoe", "type": "function", "doc": "<p>Update a specific AOE associated investigation field by considering\nits current value and the value in the current lab. An affirmative\nresponse in either the investigation or the lab takes precedence, followed\nby negative, unknown, and null responses respectively.</p>\n", "signature": "(self, aoe_path, lab_aoe)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.update_case_info_aoes", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.update_case_info_aoes", "type": "function", "doc": "<p>Update every AOE on the Case Info tabe using the update_aoe() method.</p>\n", "signature": "(self, hosp_aoe, cong_aoe, responder_aoe, hcw_aoe)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.update_pregnant_aoe", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.update_pregnant_aoe", "type": "function", "doc": "<p>Update pregnancy status AOE on COVID tab.</p>\n", "signature": "(self, pregnant_aoe)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.update_symptom_aoe", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.update_symptom_aoe", "type": "function", "doc": "<p>Update symptom status based on values in an investigation and values\nreported in the current lab.</p>\n", "signature": "(self, lab_symptom_aoe, lab_onset_date)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_confirmation_date", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_confirmation_date", "type": "function", "doc": "<p>Set confirmation date to today when creating a new investigation.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_closed_date", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_closed_date", "type": "function", "doc": "<p>Set investigation closed date to today when creating a new investigation.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_immpact_query_to_yes", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_immpact_query_to_yes", "type": "function", "doc": "<p>Set the answer to the \"Was ImmPact Queried?\" question to yes.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_vaccination_fields", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_vaccination_fields", "type": "function", "doc": "<p>Fill in all vaccination specific fields on the COVID tab after querying\nImmpact when creating a new investigation.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_lab_testing_performed", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_lab_testing_performed", "type": "function", "doc": "<p>Set the laboratory testing performed question to 'Yes' when creating\na new investigation.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.set_mmwr", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.set_mmwr", "type": "function", "doc": "<p>Set the values of the MMWR week and year correctly based on first\npositive speciment collection date.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.check_jurisdiction", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.check_jurisdiction", "type": "function", "doc": "<p>After completing an investigation check if the patient's county and\njurisdiction match. If a county is available that does not match the\njurisdication then update the jurisdiction accordingly.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.create_notification", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.create_notification", "type": "function", "doc": "<p>After completing a case create notification for it.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.send_bad_address_email", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.send_bad_address_email", "type": "function", "doc": "<p>Email the COVID Admin the list of patients with incomplete addresses.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.send_failed_query_email", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.send_failed_query_email", "type": "function", "doc": "<p>Email the COVID Admin the list of patients where the Immpact query failed.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidlabreview.COVIDlabreview.pause_for_database", "modulename": "nbsbot.covidlabreview", "qualname": "COVIDlabreview.pause_for_database", "type": "function", "doc": "<p>If the time is between midnight and 0200 pause until after 0200.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidnotificationreview", "modulename": "nbsbot.covidnotificationreview", "type": "module", "doc": "<p></p>\n"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview", "type": "class", "doc": "<p>A class to review COVID-19 cases in the notification queue.\nIt inherits from COVIDcasereview and NBSdriver.</p>\n", "bases": "covidcasereview.COVIDcasereview"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview.__init__", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview.__init__", "type": "function", "doc": "<p>Creates a new instance of the chrome driver.\nStarts the service and then creates new instance of chrome driver.</p>\n\n<p>:Args:</p>\n\n<ul>\n<li>executable_path - Deprecated: path to the executable. If the default is used it assumes the executable is in the $PATH</li>\n<li>port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.</li>\n<li>options - this takes an instance of ChromeOptions</li>\n<li>service - Service object for handling the browser driver if you need to pass extra details</li>\n<li>service_args - Deprecated: List of args to pass to the driver service</li>\n<li>desired_capabilities - Deprecated: Dictionary object with non-browser specific\ncapabilities only, such as \"proxy\" or \"loggingPref\".</li>\n<li>service_log_path - Deprecated: Where to log information from the driver.</li>\n<li>keep_alive - Deprecated: Whether to configure ChromeRemoteConnection to use HTTP keep-alive.</li>\n</ul>\n", "signature": "(self, production=False)", "funcdef": "def"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview.StandardChecks", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview.StandardChecks", "type": "function", "doc": "<p>A method to conduct checks that must be done on all cases regardless of investigator.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview.ExposureChecks", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview.ExposureChecks", "type": "function", "doc": "<p>A method to conduct all checks required to review the exposure section.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview.AOEChecks", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview.AOEChecks", "type": "function", "doc": "<p>A method to read and check all AOEs.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview.CaseInvestigatorReview", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview.CaseInvestigatorReview", "type": "function", "doc": "<p>Conduct the case review required when an investigation is assigned to a case investigator.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview.OutbreakInvestigatorReview", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview.OutbreakInvestigatorReview", "type": "function", "doc": "<p>A method to perfrom check specific to investigations assigned to outbreak investigators.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview.TriageReview", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview.TriageReview", "type": "function", "doc": "<p>A method to perfrom check specific to investigations open and closed without an investigator.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview.ReviewCase", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview.ReviewCase", "type": "function", "doc": "<p>Conduct review of a case in the notification queue.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview.ApproveNotification", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview.ApproveNotification", "type": "function", "doc": "<p>Approve notification on first case in notification queue.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview.RejectNotification", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview.RejectNotification", "type": "function", "doc": "<p>Reject notification on first case in notification queue.\nTo be used when issues were encountered during review of the case.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.covidnotificationreview.COVIDnotificationreview.SendManualReviewEmail", "modulename": "nbsbot.covidnotificationreview", "qualname": "COVIDnotificationreview.SendManualReviewEmail", "type": "function", "doc": "<p>Send email containing NBS IDs that required manual review.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver", "modulename": "nbsbot.nbsdriver", "type": "module", "doc": "<p></p>\n"}, {"fullname": "nbsbot.nbsdriver.NBSdriver", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver", "type": "class", "doc": "<p>A class to provide basic functionality in NBS via Selenium.</p>\n", "bases": "selenium.webdriver.chrome.webdriver.WebDriver"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.__init__", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.__init__", "type": "function", "doc": "<p>Creates a new instance of the chrome driver.\nStarts the service and then creates new instance of chrome driver.</p>\n\n<p>:Args:</p>\n\n<ul>\n<li>executable_path - Deprecated: path to the executable. If the default is used it assumes the executable is in the $PATH</li>\n<li>port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.</li>\n<li>options - this takes an instance of ChromeOptions</li>\n<li>service - Service object for handling the browser driver if you need to pass extra details</li>\n<li>service_args - Deprecated: List of args to pass to the driver service</li>\n<li>desired_capabilities - Deprecated: Dictionary object with non-browser specific\ncapabilities only, such as \"proxy\" or \"loggingPref\".</li>\n<li>service_log_path - Deprecated: Where to log information from the driver.</li>\n<li>keep_alive - Deprecated: Whether to configure ChromeRemoteConnection to use HTTP keep-alive.</li>\n</ul>\n", "signature": "(self, production=False)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.get_credentials", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.get_credentials", "type": "function", "doc": "<p>A method to prompt user to provide a valid username and RSA token\nto log in to NBS. Must</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.log_in", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.log_in", "type": "function", "doc": "<p>Log in to NBS.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.go_to_id", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.go_to_id", "type": "function", "doc": "<p>Navigate to specifc patient by NBS ID from Home.</p>\n", "signature": "(self, id)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.clean_patient_id", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.clean_patient_id", "type": "function", "doc": "<p>Remove the leading and trailing characters from local patient\nids to leave an id that is searchable in through the front end of NBS.</p>\n", "signature": "(self, patient_id)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.go_to_summary", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.go_to_summary", "type": "function", "doc": "<p>Within a patient profile navigate to the Summary tab.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.go_to_events", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.go_to_events", "type": "function", "doc": "<p>Within patient profile navigate to the Events tab.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.go_to_demographics", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.go_to_demographics", "type": "function", "doc": "<p>Within a patient profile navigate to the Demographics tab.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.go_to_home", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.go_to_home", "type": "function", "doc": "<p>Go to NBS Home page.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.GoToApprovalQueue", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.GoToApprovalQueue", "type": "function", "doc": "<p>Navigate to approval queue from Home page.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.ReturnApprovalQueue", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.ReturnApprovalQueue", "type": "function", "doc": "<p>Return to Approval Queue from an investigation initally accessed from the queue.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.SortApprovalQueue", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.SortApprovalQueue", "type": "function", "doc": "<p>Sort approval queue so that case are listed chronologically by\nnotification creation date and in reverse alpha order so that\n\"2019 Novel...\" is at the top.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.HandleBadQueueReturn", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.HandleBadQueueReturn", "type": "function", "doc": "<p>When a request is sent to NBS to load or filter the approval queue\nand \"Nothing found to display\", or anything other than the populated\nqueue is returned, navigate back to the home page and request the queue\nagain.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.CheckFirstCase", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.CheckFirstCase", "type": "function", "doc": "<p>Ensure that first case is COVID and save case's name for later use.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.GoToFirstCaseInApprovalQueue", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.GoToFirstCaseInApprovalQueue", "type": "function", "doc": "<p>Navigate to first case in the approval queue.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.GoToCaseInfo", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.GoToCaseInfo", "type": "function", "doc": "<p>Within a COVID investigation navigate to the Case Info tab.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.GoToCOVID", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.GoToCOVID", "type": "function", "doc": "<p>Within a COVID investigation navigate to the COVID tab.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.go_to_lab", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.go_to_lab", "type": "function", "doc": "<p>Navigate to a lab from a patient profile navigate to a lab.</p>\n", "signature": "(self, lab_id)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.read_investigation_table", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.read_investigation_table", "type": "function", "doc": "<p>Read the investigations table in the Events tab of a patient profile\nof all investigations on record, both open and closed.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.go_to_investigation_by_index", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.go_to_investigation_by_index", "type": "function", "doc": "<p>Navigate to an existing investigation based on its position in the\nInvestigations table in the Events tab of a patient profile.</p>\n", "signature": "(self, index)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.go_to_investigation_by_id", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.go_to_investigation_by_id", "type": "function", "doc": "<p>Navigate to an investigation with a given id from a patient profile.</p>\n", "signature": "(self, inv_id)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.return_to_patient_profile_from_inv", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.return_to_patient_profile_from_inv", "type": "function", "doc": "<p>Go back to the patient profile from within an investigation.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.return_to_patient_profile_from_lab", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.return_to_patient_profile_from_lab", "type": "function", "doc": "<p>Go back to the patient profile from within a lab report.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.click_submit", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.click_submit", "type": "function", "doc": "<p>Click submit button to save changes.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.click_manage_associations_submit", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.click_manage_associations_submit", "type": "function", "doc": "<p>Click submit button in the Manage Associations window.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.enter_edit_mode", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.enter_edit_mode", "type": "function", "doc": "<p>From within an investigation click the edit button to enter edit mode.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.click_cancel", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.click_cancel", "type": "function", "doc": "<p>Click cancel.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.go_to_manage_associations", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.go_to_manage_associations", "type": "function", "doc": "<p>Click button to navigate to the Manage Associations page from an investigation.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.CheckForValue", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.CheckForValue", "type": "function", "doc": "<p>If value is blank add appropriate message to list of issues.</p>\n", "signature": "(self, xpath, blank_message)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.check_for_value_bool", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.check_for_value_bool", "type": "function", "doc": "<p>Return boolean value based on whether a value is present.</p>\n", "signature": "(self, path)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.ReadDate", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.ReadDate", "type": "function", "doc": "<p>Read date from NBS and return a datetime.date object.</p>\n", "signature": "(self, xpath, attribute='innerText')", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.CheckIfField", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.CheckIfField", "type": "function", "doc": "<p>If parent field is value ensure that child field is not blank.</p>\n", "signature": "(self, parent_xpath, child_xpath, value, message)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.ReadText", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.ReadText", "type": "function", "doc": "<p>A method to read the text of any web element identified by an Xpath\nand remove leading an trailing carriage returns sometimes included by\nSelenium's get_attribute('innerText').</p>\n", "signature": "(self, xpath)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.ReadTableToDF", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.ReadTableToDF", "type": "function", "doc": "<p>A method to read tables into pandas Data Frames for easy manipulation.</p>\n", "signature": "(self, xpath)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.ReadPatientID", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.ReadPatientID", "type": "function", "doc": "<p>Read patient ID from within patient profile.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.Sleep", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.Sleep", "type": "function", "doc": "<p>Pause all action for the specified number of seconds.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.send_email_local_outlook_client", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.send_email_local_outlook_client", "type": "function", "doc": "<p>Send an email using local Outlook client.</p>\n", "signature": "(self, recipient, cc, subject, message, attachment=None)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.clear_gen_py", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.clear_gen_py", "type": "function", "doc": "<p>Clear the contents of the the gen_py directory to ensure emails can\nalways be sent.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.read_config", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.read_config", "type": "function", "doc": "<p>Read in data from config.cfg</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.get_email_info", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.get_email_info", "type": "function", "doc": "<p>Read information required for NBSbot to send emails via an smtp\nserver to various email lists.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.get_usps_user_id", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.get_usps_user_id", "type": "function", "doc": "<p>Extract the USPS User ID from the config file for later use in the\nzip_code_lookup() method.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.send_smtp_email", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.send_smtp_email", "type": "function", "doc": "<p>Send emails using an SMTP server</p>\n", "signature": "(self, receiver, subject, body, email_name)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.get_main_window_handle", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.get_main_window_handle", "type": "function", "doc": "<p>Run after login to identify and store the main window handle that the handles for pop-up windows can be differentiated.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.switch_to_secondary_window", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.switch_to_secondary_window", "type": "function", "doc": "<p>Set a secondary window as the current window in order to interact with the pop up.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.select_checkbox", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.select_checkbox", "type": "function", "doc": "<p>Ensure the a given checkbox or radio button is selected. If not selected then click it to select.</p>\n", "signature": "(self, xpath)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.unselect_checkbox", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.unselect_checkbox", "type": "function", "doc": "<p>Ensure the a given checkbox or radio button is not selected. If selected then click it to un-select.</p>\n", "signature": "(self, xpath)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.county_lookup", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.county_lookup", "type": "function", "doc": "<p>Use the Nominatim geocode service via the geopy API to look up the county of a given town/city and state.</p>\n", "signature": "(self, city, state)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.zip_code_lookup", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.zip_code_lookup", "type": "function", "doc": "<p>Given a street address, city, and state use the USPS API via the usps\nPython package to lookup the associated zip code.</p>\n", "signature": "(self, street, city, state)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.check_for_error_page", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.check_for_error_page", "type": "function", "doc": "<p>See if NBS encountered an error.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "nbsbot.nbsdriver.NBSdriver.go_to_home_from_error_page", "modulename": "nbsbot.nbsdriver", "qualname": "NBSdriver.go_to_home_from_error_page", "type": "function", "doc": "<p>Go to NBS Home page from an NBS error page.</p>\n", "signature": "(self)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();