from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
from bs4 import BeautifulSoup


class NBSdriver(webdriver.Chrome):
    def __init__(self):
        self.executable_path = r'chromedriver.exe'
        self.options = webdriver.ChromeOptions()
        self.options.add_argument('log-level=3')
        self.options.add_argument('--ignore-ssl-errors=yes')
        self.options.add_argument('--ignore-certificate-errors')
        super(NBSdriver, self).__init__(executable_path= self.executable_path, options = self.options)

########################### NBS Navigation Methods ############################
    def LogIn(self):
        self.get('https://nbstest.state.me.us/')
        self.switch_to.frame("contentFrame")
        self.username = input('Enter your SOM username ("first_name.last_name"):')
        self.find_element_by_id('username').send_keys(self.username)
        self.passcode = input('Enter your RSA passcode:')
        self.find_element_by_id('passcode').send_keys(self.passcode)
        self.find_element_by_xpath('/html/body/div[2]/p[2]/input[1]').click()
        WebDriverWait(self,60).until(EC.presence_of_element_located((By.XPATH, '//*[@id="bea-portal-window-content-4"]/tr/td/h2[4]/font/a')))
        self.find_element_by_xpath('//*[@id="bea-portal-window-content-4"]/tr/td/h2[4]/font/a').click()

    def GoToID(self, id):
        self.find_element(By.XPATH,'//*[@id="DEM229"]').send_keys(id)
        self.find_element(By.XPATH,'//*[@id="patientSearchByDetails"]/table[2]/tbody/tr[8]/td[2]/input[1]').click()
        self.find_element(By.XPATH,'//*[@id="searchResultsTable"]/tbody/tr/td[1]/a').click()

    def GoToEvents(self):
        self.find_element(By.XPATH,'//*[@id="tabs0head1"]').click()

    def GoToHome(self):
        self.find_element(By.XPATH,'//*[@id="bd"]/table[1]/tbody/tr/td[1]/table/tbody/tr/td[1]/a').click()

    def GoToApprovalQueue(self):
        self.find_element(By.PARTIAL_LINK_TEXT,'Approval Queue for Initial Notifications').click()

    def GoToFirstCaseInApprovalQueue(self):
        self.find_element(By.XPATH,'//*[@id="parent"]/tbody/tr[1]/td[8]/a').click()
        self.issues = []

    def GoToCaseInfo(self):
        self.find_element(By.XPATH,'//*[@id="tabs0head1"]').click()

    def GoToCOVID(self):
        self.find_element(By.XPATH,'//*[@id="tabs0head2"]').click()

######################### Name Information Check Methods #######################
    def CheckFirstName(self):
        first_name = self.find_element(By.XPATH,'//*[@id="DEM104"]').text
        if not first_name:
            self.issues.append('First name is blank.')

    def CheckLastName(self):
        last_name = self.find_element(By.XPATH,'//*[@id="DEM102"]').text
        if not last_name:
            self.issues.append('Last name is blank.')

###################### Other Personal Details Check Methods ####################
    def CheckDOB(self):
        dob = self.find_element(By.XPATH,'//*[@id="DEM115"]').text
        if not dob:
            self.issues.append('DOB is blank.')

#################### Reporting Address Check Methods ###########################
    def CheckStAddr(self):
        street_address = self.find_element(By.XPATH,'//*[@id="DEM159"]').text
        if not street_address:
            self.issues.append('Street address is blank.')

    def CheckCity(self):
        city = self.find_element(By.XPATH,'//*[@id="DEM161"]').text
        if not city:
            self.issues.append('City is blank.')

    def CheckState(self):
        state = self.find_element(By.XPATH,'//*[@id="DEM162"]').text
        if not state:
            self.issues.append('State is blank.')
        # State should be Maine.
        elif sate != 'Maine':
            self.issues.append('State is not Maine.')

    def CheckZip(self):
        zipcode = self.find_element(By.XPATH,'//*[@id="DEM163"]').text
        if not zipcode:
            self.issues.append('Zip code is blank.')

    def CheckCounty(self):
        self.county = self.find_element(By.XPATH,'//*[@id="DEM164"]').text
        if not self.county:
            self.issues.append('County is blank.')

    def CheckCountry(self):
        country = self.find_element(By.XPATH,'//*[@id="DEM165"]').text
        if not value:
            self.issues.append('Country is blank.')
        # Country should be USA.
        elif country != 'UNITED STATES':
            self.issues.append('Country listed is not USA.')

############ Ethnicity and Race Information Check Methods #####################
    def CheckEthnicity(self):
        ethnicity = self.find_element(By.XPATH,'//*[@id="DEM155"]').text
        if not ethnicity:
            self.issues.append('Ethnicity is blank.')

    def CheckRace(self):
        race = self.find_element(By.XPATH,'//*[@id="patientRacesViewContainer"]').text
        if not race:
            self.issues.append('Race is blank.')
        # Race should only be unknown if no other options are selected.
        if ('Unknown' in race) and (race != 'Unknown'):
            self.issues.append('Unknown selected in addition to other options.')

################### Investigation Details Check Methods ########################
    def CheckJurisdiction(self):
        jurisdiction = self.find_element(By.XPATH,'//*[@id="INV107"]').text
        if not jurisdiction:
            self.issues.append('Jurisdiction is blank.')
        #Jurisdiction and county must match.
        elif jurisdiction not in self.county:
            self.issues.append('County and jurisdiction mismatch.')

    def CheckProgramArea(self):
        program_area = self.find_element(By.XPATH,'//*[@id="INV108"]').text
        if not program_area:
            self.issues.append('Program Area is blank.')
        elif program_area != 'Airborne and Direct Contact Diseases':
            self.issues.append('Program Area is not "Airborne and Direct Contact Diseases".')

    def CheckInvestigationStatus(self):
        inv_status = self.find_element(By.XPATH,'//*[@id="INV109"]').text
        if not inv_status:
            self.issues.append('Investigation status is blank.')
        elif inv_status == 'Open':
            self.issues.append('Investigation status is open.')

    def CheckSharedIndicator(self):
        shared_indicator = self.find_element(By.XPATH,'//*[@id="NBS_UI_19"]/tbody/tr[5]/td[2]').text
        if shared_indicator != 'Yes':
            self.issues.append('Shared indicator not selected.')

    def CheckStateCaseID(self):
        case_id = self.find_element(By.XPATH, '//*[@id="INV173"]')
        if not case_id:
            self.issues.append('State Case ID is blank.')

    def CheckInvestigator(self):
        """ Check if an investigator was assigned to the case. """
        investigator = self.find_element(By.XPATH, '//*[@id="INV180"]')
        if investigator:
            self.investigator = True
        else:
            self.investigator = False

    def CheckInvestigatorAssignDate(self):
        """ If an investigator was assinged then there should be an investigator
        assigned date. """
        if self.investigator:
            assigned_date = self.find_element(By.XPATH, '//*[@id="INV110"]')
            if not assigned_date:
                self.issues.append('Missing investigator assigned date.')

########################### Parse and process labs ############################
    def ReadAssociatedLabs(self):
        # Get html of associated lab table.
        html = NBS.find_element(By.XPATH, '//*[@id="viewSupplementalInformation1"]/tbody').get_attribute('innerHTML')
        # Parse html
        soup = BeautifulSoup(html, 'html.parser')
        # Read table into DataFrame.
        table = pd.read_html(str(soup))
        self.labs = table[0]

    def AssignLabTypes(self):
        # List substrings that indicate specific lab types.
        pcr_flags = ['RNA', 'PCR', 'NAA', 'GENE', 'COV-2', 'COVID19', 'COVID-19', 'PRL SCV2']
        ag_flags = ['AG', 'ANTIGEN', 'VERITOR']
        ab_flags = ['AB', 'IGG', 'IGM', 'IGA', 'Antibod', 'T-DETECT']
        test_types = [('pcr', pcr_flags), ('antigen', ag_flags), ('antibody', ab_flags)]
        # Review lab results string for each lab, looking for substring flags in order to assing a lab type.
        for type in test_types:
            self.labs[type[0]] = labs['Test Results'].apply(lambda results: any(flag in results.upper() for flag in type[1]))

    def DetermineCaseStatus(self):
        """Review lab types to determine case status.
        PCR => confirmed
        Antigen => probable
        Antibody => suspect
        """
        if any(self.labs.pcr):
            self.status = 'C'
        elif any(self.labs.antigen):
            self.status = 'P'
        elif any(self.labs.antibody):
            self.status = 'S'
        else:
            self.status = ''

    def GetReportDate(self):
        """Find earliest report date by reviewing associated labs"""
        # Convert from string to datetime for comparison.
        self.labs['Date Received'] = pd.to_datetime(self.labs['Date Received'], format = '%m/%d/%Y%I:%M %p')
        # Get minimum date and convert back to string matching format in NBS.
        self.report_date = self.labs['Date Received'].min().strftime('%m/%d/%Y')

    def GetCollectionDate(self):
        """Find earliest collection date by reviewing associated labs"""
        # Convert from string to datetime for comparison.
        self.labs['Date Collected'] = pd.to_datetime(self.labs['Date Collected'], format = '%m/%d/%Y')
        # Get minimum date and convert back to string matching format in NBS.
        self.collection_date = self.labs['Date Collected'].min().strftime('%m/%d/%Y')




NBS = NBSdriver()
NBS.LogIn()
NBS.GoToApprovalQueue()
NBS.GoToFirstCaseInApprovalQueue()
NBS.ReadAssociatedLabs()
NBS.labs
NBS.AssignLabTypes()
NBS.labs
NBS.DetermineCaseStatus()
NBS.status

NBS.GetReportDate()
NBS.report_date

NBS.GetCollectionDate()
NBS.collection_date
NBS.GoToCaseInfo()
NBS.GoToCOVID()
NBS.GoToHome()
NBS.GoToID(2604729)
